set.seed(1119)
n<-40;lambda <-0.2;nosim<-1000
t=sapply(rep(lambda,nosim),function(lambda){mean(rexp(n,lambda))})
dty<-density(t)
par(mfrow=c(1,2))
h<-hist(t,main="Histogram",xlab="Means")
a<-seq(min(t),max(t),length=40)
b<-dnorm(a,mean=mean(t),sd=sd(t))
b<- b*diff(h$mids[1:2])*length(t)
lines(a,b, col="blue", lwd=2)
dty<-density(t)
par(mfrow=c(1,2))
h<-hist(t,main="Histogram",xlab="Means")
a<-seq(min(t),max(t),length=40)
b<-dnorm(a,mean=mean(t),sd=sd(t))
b<- b*diff(h$mids[1:2])*length(t)
lines(a,b, col="Grey", lwd=2)
abline(v=mean(t),col="Blue",lwd=2)
abline(v=1/lambda,col="Red",lwd=2)
legend("topright",pch=1,legend=c("Normal"),col=c("grey"))
plot(dty$x,dty$y,xlab="Means",ylab="Density",type="n",xlim=c(2,8),ylim=c(0,0.5))
title(paste("Density plot"))
lines(dty$x,dty$y,lwd=2)
data(mtcars)
fit<-lm(mpg~as.factor(cyl)+wt,data=mtcars)
summary(fit)
data(mtcars)
fit<-lm(mpg~as.factor(cyl),data=mtcars)
summary(fit)
data(mtcars)
fit<-lm(mpg~as.factor(cyl),data=mtcars)
summary(fit)
data(mtcars)
fit<-lm(mpg~as.factor(cyl)+wt,data=mtcars)
summary(fit)
data(mtcars)
fit<-lm(mpg~as.factor(cyl)+wt,data=mtcars)
summary(fit)
data(mtcars)
fit<-lm(mpg~as.factor(cyl),data=mtcars)
summary(fit)
setwd("~/datasciencecoursera/PML")
training<-read.csv("pml-training.csv",na.string=c(NA,""," "))
testing<-read.csv("pml-testing.csv",na.string=c(NA,""," "))
View(training)
training<-training[,-1]
testing<-testing[,-1]
trainingDataNA <- apply(trainingData,2,function(x) {sum(is.na(x))})
trainingNA <- apply(training,2,function(x) {sum(is.na(x))})
trainingNA
which(trainingDataNA> 0)
which(trainingNA> 0)
which(trainingNA <5000)
a<-which(trainingNA <5000)
colnames(training_tidy)[1:
colnames(training_tidy)[1:7]
colnames(training_tidy)[1:7,]
names(training_tidy[,1:7])
training_tidy <- training[,which(trainingNA <5000)]
names(training_tidy[,1:7])
library(caret)
##removing NAs from training
trainingNA <- apply(training,2,function(x) {sum(is.na(x))})
training_tidy <- training[,which(trainingNA ==0)]
##removing irrelevant columns named:
names(training_tidy[,1:7])
training_tidy<-training_tidy[,8:dim(trainig_tidy)[2]]
training_tidy<-training_tidy[,8:dim(training_tidy)[2]]
paste0("Cleaning Data")
inTrain<-createDataPartition(y=training_tidy$classe,p=0.75,list=F)
subtraining<-training_tidy[inTrain,]
subtesting<-training_tidy[-inTrain,]
fitCTRL<-trainControl(method="repeatedcv",number = 2 , repeats = 2)
fit<-train(classe~.,data=subtraining,method="gbm",trControl = fitCTRL,verbose=F)
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("glm")
